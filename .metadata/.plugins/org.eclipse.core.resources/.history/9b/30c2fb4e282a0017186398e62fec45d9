import java.net.*;
import java.io.*;

/*
 * Implement different requests client send to the server
 */
public class Client {
	
	// Add request
	void add(String hostAddress, String portNumber, String allHostInfo) {
		System.out.println("Connecting to " + hostAddress + " on port " + portNumber);
		try {
			Socket client = new Socket(hostAddress, Integer.valueOf(portNumber));
			System.out.println("Just connected to "+ client.getRemoteSocketAddress());
			
			allHostInfo = "add" + allHostInfo;
			DataOutputStream out = new DataOutputStream(client.getOutputStream());
			out.writeUTF(allHostInfo);
			
			InputStream inFromServer = client.getInputStream();
			DataInputStream in = new DataInputStream(inFromServer);
			System.out.println("Server says " + in.readUTF());
			
			client.close();
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	// Get netsFile
	String getNetsfile(String otherHostAddress, String otherHostPort) {
		String netsFile = "";
		try {
			Socket client = new Socket(otherHostAddress, Integer.valueOf(otherHostPort));
			System.out.println("Try to get nets file from: "+ client.getRemoteSocketAddress());
			
			DataOutputStream out = new DataOutputStream(client.getOutputStream());
			out.writeUTF("nets");
			
			InputStream inFromServer = client.getInputStream();
			DataInputStream in = new DataInputStream(inFromServer);
			netsFile = in.readUTF();
			System.out.println("Nets return from server is: " + netsFile);
			client.close();
			return netsFile;
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	// 
	String getTuplesFile(String otherHostAddress, String otherHostPort) {
		String netsFile = "";
		try {
			Socket client = new Socket(otherHostAddress, Integer.valueOf(otherHostPort));
			System.out.println("Try to get tuples file from: "+ client.getRemoteSocketAddress());
			
			DataOutputStream out = new DataOutputStream(client.getOutputStream());
			out.writeUTF("tuples");
			
			InputStream inFromServer = client.getInputStream();
			DataInputStream in = new DataInputStream(inFromServer);
			netsFile = in.readUTF();
			System.out.println("Tuples return from server is: " + netsFile);
			client.close();
			return netsFile;
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	//Check whether the server is working or not
	boolean checkServerStatus(String hostAddress, String portNumber) {
		System.out.println("Connecting to " + hostAddress + " on port " + portNumber);
		try {
			Socket client = new Socket(hostAddress, Integer.valueOf(portNumber));
			System.out.println("Just connected to "+ client.getRemoteSocketAddress());
			DataOutputStream out = new DataOutputStream(client.getOutputStream());
			out.writeUTF("check");
			client.close();
		} catch (java.net.ConnectException e) {
			return false;
		} catch (IOException e) {
			return false;
		}
		return true;
	}
	
	// Out request
	void out(String hostAddress, String portNumber, String tuples) {
		System.out.println("Connecting to " + hostAddress + " on port " + portNumber);
		try {
			Socket client = new Socket(hostAddress, Integer.valueOf(portNumber));
			System.out.println("Just connected to "+ client.getRemoteSocketAddress());
			
			tuples = "out" + tuples;
			DataOutputStream out = new DataOutputStream(client.getOutputStream());
			out.writeUTF(tuples);
			
			InputStream inFromServer = client.getInputStream();
			DataInputStream in = new DataInputStream(inFromServer);
			System.out.println("Server says " + in.readUTF());
			
			client.close();
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	// Out backup request
	void outBackup(String hostAddress, String portNumber, String tuples) {
		System.out.println("Connecting to " + hostAddress + " on port " + portNumber);
		try {
			Socket client = new Socket(hostAddress, Integer.valueOf(portNumber));
			System.out.println("Just connected to "+ client.getRemoteSocketAddress());
			
			tuples = "obu" + tuples;
			DataOutputStream out = new DataOutputStream(client.getOutputStream());
			out.writeUTF(tuples);
			
			InputStream inFromServer = client.getInputStream();
			DataInputStream in = new DataInputStream(inFromServer);
			System.out.println("Server says " + in.readUTF());
			
			client.close();
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	// Exact in request
	void ine(String hostAddress, String portNumber, String tuples) {
		System.out.println("Connecting to " + hostAddress + " on port " + portNumber);
		try {
			Socket client = new Socket(hostAddress, Integer.valueOf(portNumber));
			tuples = "ine" + tuples;
			DataOutputStream out = new DataOutputStream(client.getOutputStream());
			out.writeUTF(tuples);
			InputStream inFromServer = client.getInputStream();
			DataInputStream in = new DataInputStream(inFromServer);
			System.out.println("Server says: " + in.readUTF());
			client.close();
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	//
	void inBackup(String hostAddress, String portNumber, String tuples) {
		System.out.println("Connecting to " + hostAddress + " on port " + portNumber);
		try {
			Socket client = new Socket(hostAddress, Integer.valueOf(portNumber));
			tuples = "ibu" + tuples;
			DataOutputStream out = new DataOutputStream(client.getOutputStream());
			out.writeUTF(tuples);
			InputStream inFromServer = client.getInputStream();
			DataInputStream in = new DataInputStream(inFromServer);
			System.out.println("Server says: " + in.readUTF());
			client.close();
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	//
	void ibe(String hostAddress, String portNumber, String tuples) {
		System.out.println("Connecting to " + hostAddress + " on port " + portNumber);
		try {
			Socket client = new Socket(hostAddress, Integer.valueOf(portNumber));
			tuples = "ibe" + tuples;
			DataOutputStream out = new DataOutputStream(client.getOutputStream());
			out.writeUTF(tuples);
			InputStream inFromServer = client.getInputStream();
			DataInputStream in = new DataInputStream(inFromServer);
			System.out.println("Server says: " + in.readUTF());
			client.close();
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	// Exact read request
	boolean rde(String hostAddress, String portNumber, String tuples) {
		String message = "";
		try {
			Socket client = new Socket(hostAddress, Integer.valueOf(portNumber));
			tuples = "rde" + tuples;
			
			DataOutputStream out = new DataOutputStream(client.getOutputStream());
			out.writeUTF(tuples);
			
			InputStream inFromServer = client.getInputStream();
			DataInputStream in = new DataInputStream(inFromServer);
			message = in.readUTF();
			client.close();
			
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		if(!message.equals("")) {
			System.out.println(message);
		}
		return message.equals("") ? false:true;
	}
	
	boolean rbu(String hostAddress, String portNumber, String tuples) {
		String message = "";
		try {
			Socket client = new Socket(hostAddress, Integer.valueOf(portNumber));
			tuples = "rbu" + tuples;
			
			DataOutputStream out = new DataOutputStream(client.getOutputStream());
			out.writeUTF(tuples);
			
			InputStream inFromServer = client.getInputStream();
			DataInputStream in = new DataInputStream(inFromServer);
			message = in.readUTF();
			client.close();
			
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		if(!message.equals("")) {
			System.out.println(message);
		}
		return message.equals("") ? false:true;
	}
	
	
	
}
